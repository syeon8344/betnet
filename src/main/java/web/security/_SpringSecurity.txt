<ChatGPT>
Spring Security 6의 기본 인증 흐름은 다음과 같은 단계로 구성됩니다. 아래 플로우차트를 요약한 내용으로 설명드릴게요:
    1. 사용자 요청
        클라이언트 요청: 사용자가 로그인, 데이터 접근 등 보호된 리소스에 접근하기 위해 요청을 보냅니다. 이 요청은 보통 HTTP POST 또는 GET 메서드를 사용합니다.
        요청 URL: 보안 필터 체인은 설정된 URL 패턴을 기반으로 요청을 필터링합니다.
    2. Security Filter Chain
        필터 체인: Spring Security는 여러 개의 필터로 구성된 체인을 사용하여 요청을 처리합니다. 기본적으로 HttpSecurity 설정에 따라 자동으로 구성됩니다.
        필터 순서: 각 필터는 요청이 들어오면 순차적으로 실행되며, 인증 및 권한 부여, CSRF 보호, CORS 설정 등을 처리합니다.
    3. 인증 필터
        Authentication Filter: 사용자의 인증 정보를 추출하는 필터로, 주로 UsernamePasswordAuthenticationFilter가 사용됩니다.
        정보 추출: 요청에서 사용자 이름과 비밀번호를 추출하여 Authentication 객체를 생성합니다.
        유효성 검사: 필터는 요청의 유효성을 검사하고, 로그인 페이지로 리다이렉트하거나 오류를 반환합니다.
    4. AuthenticationManager
        인증 처리: AuthenticationManager는 인증 요청을 처리하는 중앙 컴포넌트입니다. Authentication 객체를 전달받아 인증을 시도합니다.
        Provider 선택: 여러 인증 방법이 설정되어 있다면, 적절한 AuthenticationProvider가 선택됩니다.
    5. UserDetailsService
        사용자 정보 로드: UserDetailsService를 통해 데이터베이스 등에서 사용자의 정보를 조회합니다. 이 정보에는 사용자 이름, 비밀번호, 권한 등이 포함됩니다.
        UserDetails 반환: UserDetails 객체가 반환되며, 이 객체는 사용자에 대한 정보를 포함합니다.
    6. 인증 결과
        인증 성공/실패: 인증이 성공하면 Authentication 객체가 반환되며, 여기에는 인증된 사용자 정보와 권한이 포함됩니다. 실패할 경우 AuthenticationException이 발생합니다.
        예외 처리: 인증 실패 시, 적절한 오류 메시지를 클라이언트에 전달합니다.
    7. 세션 생성
        세션 유지: 인증이 성공하면 Spring Security는 사용자 세션을 생성합니다. 이는 사용자 상태를 유지하는 데 사용됩니다.
        세션 ID: 클라이언트에게는 세션 ID가 쿠키에 저장되어 다음 요청 시 사용됩니다.
    8. Authorization
        권한 확인: 이후 요청에 대해 Authorization 과정이 수행됩니다. 요청을 보낸 사용자의 권한이 확인되어, 해당 리소스에 접근할 수 있는지 검증합니다.
        접근 허용/거부: 사용자가 권한이 있을 경우 요청이 허용되며, 없을 경우 403 Forbidden 응답이 반환됩니다.
    9. 응답
        최종 응답: 모든 과정이 성공적으로 완료되면, 서버는 클라이언트에게 요청에 대한 응답을 반환합니다. 이 응답은 보호된 리소스일 수 있습니다.
        상태 코드: 성공적인 요청에 대해 200 OK 응답 코드가 반환되며, 실패한 경우에는 적절한 상태 코드가 반환됩니다.

Spring Security에서 Authentication의 기본값은 다음과 같은 요소로 구성됩니다:

Principal: 인증된 사용자 정보 (예: 사용자 이름 또는 UserDetails 객체).
Credentials: 사용자의 비밀번호와 같은 인증 정보.
Authorities: 사용자의 권한 목록 (GrantedAuthority 객체의 컬렉션).
Details: 추가적인 세부 정보 (예: 요청 IP 주소, 세션 정보 등).
Authenticated: 인증 여부를 나타내는 boolean 값

<Security Filter Chain>
    [특정 REST API를 이용한 로그인 방법]
    1. 커스텀 로그인 필터 구현
        먼저, RESTful 로그인 요청을 처리할 커스텀 필터를 만들어야 합니다. 이 필터는 사용자 인증 정보를 받아서 인증을 수행합니다.
    2. Security Configuration 설정
        이제 위에서 만든 RestLoginFilter를 SecurityConfig에 추가합니다. 이 필터를 Spring Security 필터 체인에 등록하여 /login 경로로의 요청을 처리하게 할 수 있습니다.
    3. 로그인 API 요청
        이제 클라이언트에서 /login 경로로 POST 요청을 보낼 수 있습니다. 요청 본문에 사용자 이름과 비밀번호를 JSON 형식으로 포함하여 전송합니다.
    4. 성공 및 실패 처리
        성공적인 인증: successfulAuthentication 메서드에서 JWT 토큰을 발급하거나 성공 메시지를 반환하도록 구현할 수 있습니다.
        실패한 인증: unsuccessfulAuthentication 메서드에서 실패 메시지를 반환하도록 구현할 수 있습니다.